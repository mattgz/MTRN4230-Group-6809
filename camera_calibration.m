% Define images to process
imageFileNames = {'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i1.jpg',...
    'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i2.jpg',...
    'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i3.jpg',...
    'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i4.jpg',...
    'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i5.jpg',...
    'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i6.jpg',...
    'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i7.jpg',...
    'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i8.jpg',...
    'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i9.jpg',...
    'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i10.jpg',...
    'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i11.jpg',...
    'C:\Users\Jonathan\Documents\UNSW Engineering\2019\S2\MTRN4230\Group Project\A1_Images\Camera Calibration\i12.jpg',...   
    };
% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% 2. Camera Calibration Process - Extrinsic

%h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% MATLAB function to solve PnP problem of extrinsics given relation between
% world and image coordinate systems (needed > 4 points)
imagePoints = [7,289; 800,289 ; 1597,289 ; 800,855 ; 1597,855];
worldPoints = [175,-520 ; 175,0 ; 175,520 ; 548,0 ; 548,520];
 
% ---------------EXTRINSINC RESULTS---------------
[rotationMatrix, translationVector] = extrinsics(...
imagePoints,worldPoints,cameraParams)

% Testing GUI
matlabImage = imread('blank_image.jpg');    
    
% After applying correction for distortion from calibration
undistortedImage = undistortImage(matlabImage,cameraParams);
imshow(undistortedImage)   
    
worldPoints = pointsToWorld(calibrationSession.CameraParameters,rotationMatrix,translationVector,[x_image,y_image]);    
worldPoints(:,3) = 147.00;    
worldPoints %display vector of world coordinates
